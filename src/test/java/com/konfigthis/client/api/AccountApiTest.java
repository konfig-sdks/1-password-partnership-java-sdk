/*
 * 1Password Partnership API
 * Trusted by more than 100,000 businesses to protect their data, 1Password gives you complete control over passwords and other sensitive business information.   As an integral layer of the Identity and Access Management (IAM) stack, 1Password protects all employee accounts – even those you aren't aware of. Give employees secure access to any app or service and safely share everything you need to work together – including logins, documents, credit cards, and more – while keeping everything else private.  1Password is easy to deploy and integrates with Azure AD, Okta, OneLogin, and Slack, so you can automatically provision employees using the systems you already trust. It's simple to manage and fits seamlessly into your team's workflow, so you can secure your business without compromising productivity.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: partners@1password.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Account;
import com.konfigthis.client.model.CreatePartnerAccountRequest;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.UpdatePartnerAccountRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountApi
 */
@Disabled
public class AccountApiTest {

    private static AccountApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AccountApi(apiClient);
    }

    /**
     * Begins provisioning process for a new partner associated 1Password account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void beginProvisioningProcessTest() throws ApiException {
        String customerAccountUid = null;
        String accountType = null;
        String domain = null;
        OffsetDateTime endsAt = null;
        Account response = api.beginProvisioningProcess(customerAccountUid, accountType, domain)
                .endsAt(endsAt)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns an account based on an UID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByUidTest() throws ApiException {
        String customerAccountUid = null;
        Account response = api.getByUid(customerAccountUid)
                .execute();
        // TODO: test validations
    }

    /**
     * Removes an account from the partnership domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFromPartnershipTest() throws ApiException {
        String customerAccountUid = null;
        api.removeFromPartnership(customerAccountUid)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates the ends_at attribute of an account based on an UID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEndsAtByUidTest() throws ApiException {
        OffsetDateTime endsAt = null;
        String customerAccountUid = null;
        Account response = api.updateEndsAtByUid(endsAt, customerAccountUid)
                .execute();
        // TODO: test validations
    }

}
