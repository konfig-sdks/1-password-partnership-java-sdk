/*
 * 1Password Partnership API
 * Trusted by more than 100,000 businesses to protect their data, 1Password gives you complete control over passwords and other sensitive business information.   As an integral layer of the Identity and Access Management (IAM) stack, 1Password protects all employee accounts – even those you aren't aware of. Give employees secure access to any app or service and safely share everything you need to work together – including logins, documents, credit cards, and more – while keeping everything else private.  1Password is easy to deploy and integrates with Azure AD, Okta, OneLogin, and Slack, so you can automatically provision employees using the systems you already trust. It's simple to manage and fits seamlessly into your team's workflow, so you can secure your business without compromising productivity.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: partners@1password.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreatePartnerAccountRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreatePartnerAccountRequest {
  public static final String SERIALIZED_NAME_CUSTOMER_ACCOUNT_UID = "customer_account_uid";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ACCOUNT_UID)
  private String customerAccountUid;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "account_type";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_ENDS_AT = "ends_at";
  @SerializedName(SERIALIZED_NAME_ENDS_AT)
  private OffsetDateTime endsAt;

  public CreatePartnerAccountRequest() {
  }

  public CreatePartnerAccountRequest customerAccountUid(String customerAccountUid) {
    
    
    
    
    this.customerAccountUid = customerAccountUid;
    return this;
  }

   /**
   * A unique identifier for the end user&#39;s account to be provisioned. It can be up to 80 chars long and consist of alphanumeric characters and hyphens.
   * @return customerAccountUid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A unique identifier for the end user's account to be provisioned. It can be up to 80 chars long and consist of alphanumeric characters and hyphens.")

  public String getCustomerAccountUid() {
    return customerAccountUid;
  }


  public void setCustomerAccountUid(String customerAccountUid) {
    
    
    
    this.customerAccountUid = customerAccountUid;
  }


  public CreatePartnerAccountRequest accountType(String accountType) {
    
    
    
    
    this.accountType = accountType;
    return this;
  }

   /**
   * Specifies the type of 1Password account plan to provision - &#39;I&#39; for Individual, or &#39;F&#39; for family.
   * @return accountType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the type of 1Password account plan to provision - 'I' for Individual, or 'F' for family.")

  public String getAccountType() {
    return accountType;
  }


  public void setAccountType(String accountType) {
    
    
    
    this.accountType = accountType;
  }


  public CreatePartnerAccountRequest domain(String domain) {
    
    
    
    
    this.domain = domain;
    return this;
  }

   /**
   * Specifies the 1Password domain to provision the account for. For testing it can be one of &#39;b5test.com&#39;, &#39;b5test.ca&#39;, or &#39;b5test.eu&#39;. For production, it can be one of &#39;1password.com&#39;, &#39;1password.ca&#39;, or &#39;1password.eu&#39;. Note that domains can only be used after promotions have been created for a given partnership in the specific domain.
   * @return domain
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the 1Password domain to provision the account for. For testing it can be one of 'b5test.com', 'b5test.ca', or 'b5test.eu'. For production, it can be one of '1password.com', '1password.ca', or '1password.eu'. Note that domains can only be used after promotions have been created for a given partnership in the specific domain.")

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    
    
    
    this.domain = domain;
  }


  public CreatePartnerAccountRequest endsAt(OffsetDateTime endsAt) {
    
    
    
    
    this.endsAt = endsAt;
    return this;
  }

   /**
   * Specifies when the 1Password account will be frozen, formatted in RFC-3339.
   * @return endsAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies when the 1Password account will be frozen, formatted in RFC-3339.")

  public OffsetDateTime getEndsAt() {
    return endsAt;
  }


  public void setEndsAt(OffsetDateTime endsAt) {
    
    
    
    this.endsAt = endsAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreatePartnerAccountRequest instance itself
   */
  public CreatePartnerAccountRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePartnerAccountRequest createPartnerAccountRequest = (CreatePartnerAccountRequest) o;
    return Objects.equals(this.customerAccountUid, createPartnerAccountRequest.customerAccountUid) &&
        Objects.equals(this.accountType, createPartnerAccountRequest.accountType) &&
        Objects.equals(this.domain, createPartnerAccountRequest.domain) &&
        Objects.equals(this.endsAt, createPartnerAccountRequest.endsAt)&&
        Objects.equals(this.additionalProperties, createPartnerAccountRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerAccountUid, accountType, domain, endsAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePartnerAccountRequest {\n");
    sb.append("    customerAccountUid: ").append(toIndentedString(customerAccountUid)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    endsAt: ").append(toIndentedString(endsAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customer_account_uid");
    openapiFields.add("account_type");
    openapiFields.add("domain");
    openapiFields.add("ends_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("customer_account_uid");
    openapiRequiredFields.add("account_type");
    openapiRequiredFields.add("domain");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreatePartnerAccountRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreatePartnerAccountRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePartnerAccountRequest is not found in the empty JSON string", CreatePartnerAccountRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreatePartnerAccountRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("customer_account_uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_account_uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_account_uid").toString()));
      }
      if (!jsonObj.get("account_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_type").toString()));
      }
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePartnerAccountRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePartnerAccountRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePartnerAccountRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePartnerAccountRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePartnerAccountRequest>() {
           @Override
           public void write(JsonWriter out, CreatePartnerAccountRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePartnerAccountRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreatePartnerAccountRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreatePartnerAccountRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreatePartnerAccountRequest
  * @throws IOException if the JSON string is invalid with respect to CreatePartnerAccountRequest
  */
  public static CreatePartnerAccountRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePartnerAccountRequest.class);
  }

 /**
  * Convert an instance of CreatePartnerAccountRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

