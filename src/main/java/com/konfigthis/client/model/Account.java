/*
 * 1Password Partnership API
 * Trusted by more than 100,000 businesses to protect their data, 1Password gives you complete control over passwords and other sensitive business information.   As an integral layer of the Identity and Access Management (IAM) stack, 1Password protects all employee accounts – even those you aren't aware of. Give employees secure access to any app or service and safely share everything you need to work together – including logins, documents, credit cards, and more – while keeping everything else private.  1Password is easy to deploy and integrates with Azure AD, Okta, OneLogin, and Slack, so you can automatically provision employees using the systems you already trust. It's simple to manage and fits seamlessly into your team's workflow, so you can secure your business without compromising productivity.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: partners@1password.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Account
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Account {
  public static final String SERIALIZED_NAME_CUSTOMER_ACCOUNT_UID = "customer_account_uid";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ACCOUNT_UID)
  private String customerAccountUid;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "account_type";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_ACTIVATION_TOKEN = "activation_token";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_TOKEN)
  private String activationToken;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_DEPLOYED_MEMBERS = "deployed_members";
  @SerializedName(SERIALIZED_NAME_DEPLOYED_MEMBERS)
  private Integer deployedMembers;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_ENDS_AT = "ends_at";
  @SerializedName(SERIALIZED_NAME_ENDS_AT)
  private OffsetDateTime endsAt;

  public Account() {
  }

  public Account customerAccountUid(String customerAccountUid) {
    
    
    
    
    this.customerAccountUid = customerAccountUid;
    return this;
  }

   /**
   * The unique identifier for the end user&#39;s account. It can be up to 80 chars long and consist of alphanumeric characters and hyphens.
   * @return customerAccountUid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique identifier for the end user's account. It can be up to 80 chars long and consist of alphanumeric characters and hyphens.")

  public String getCustomerAccountUid() {
    return customerAccountUid;
  }


  public void setCustomerAccountUid(String customerAccountUid) {
    
    
    
    this.customerAccountUid = customerAccountUid;
  }


  public Account accountType(String accountType) {
    
    
    
    
    this.accountType = accountType;
    return this;
  }

   /**
   * The current type of the 1Password account - &#39;I&#39; for Individual, or &#39;F&#39; for family.
   * @return accountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The current type of the 1Password account - 'I' for Individual, or 'F' for family.")

  public String getAccountType() {
    return accountType;
  }


  public void setAccountType(String accountType) {
    
    
    
    this.accountType = accountType;
  }


  public Account activationToken(String activationToken) {
    
    
    
    
    this.activationToken = activationToken;
    return this;
  }

   /**
   * The activation token is a coupon code to link a new or existing 1Password account to a partnership promotion. For example, it can be used for 1Password account creation at https://start.{{1password_domain}}/partnership/redeem?t&#x3D;{{account_type}}&amp;c&#x3D;{{activation_token}} during end-user signup.
   * @return activationToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The activation token is a coupon code to link a new or existing 1Password account to a partnership promotion. For example, it can be used for 1Password account creation at https://start.{{1password_domain}}/partnership/redeem?t={{account_type}}&c={{activation_token}} during end-user signup.")

  public String getActivationToken() {
    return activationToken;
  }


  public void setActivationToken(String activationToken) {
    
    
    
    this.activationToken = activationToken;
  }


  public Account domain(String domain) {
    
    
    
    
    this.domain = domain;
    return this;
  }

   /**
   * The 1Password domain for which the account was provisioned for. For testing domains, it can be one of &#39;b5test.com&#39;, &#39;b5test.ca&#39;, or &#39;b5test.eu&#39;. For production, it can be one of &#39;1password.com&#39;, &#39;1password.ca&#39;, or &#39;1password.eu&#39;.
   * @return domain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The 1Password domain for which the account was provisioned for. For testing domains, it can be one of 'b5test.com', 'b5test.ca', or 'b5test.eu'. For production, it can be one of '1password.com', '1password.ca', or '1password.eu'.")

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    
    
    
    this.domain = domain;
  }


  public Account status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * The provisioning status of the partner account. It can be either &#39;entitled&#39; for accounts that have been initialized but have not completed 1Password signup, or &#39;provisioned&#39; for accounts that have completed the 1Password signup process.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The provisioning status of the partner account. It can be either 'entitled' for accounts that have been initialized but have not completed 1Password signup, or 'provisioned' for accounts that have completed the 1Password signup process.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public Account deployedMembers(Integer deployedMembers) {
    
    
    
    
    this.deployedMembers = deployedMembers;
    return this;
  }

   /**
   * The number of provisioned users for the 1Password account.
   * @return deployedMembers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of provisioned users for the 1Password account.")

  public Integer getDeployedMembers() {
    return deployedMembers;
  }


  public void setDeployedMembers(Integer deployedMembers) {
    
    
    
    this.deployedMembers = deployedMembers;
  }


  public Account createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The timestamp of when the partnership account was created, formatted in RFC-3339.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp of when the partnership account was created, formatted in RFC-3339.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public Account updatedAt(OffsetDateTime updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The timestamp of when the partner account was last updated, formatted in RFC-3339. This field will be updated during account status changes.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp of when the partner account was last updated, formatted in RFC-3339. This field will be updated during account status changes.")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }


  public Account endsAt(OffsetDateTime endsAt) {
    
    
    
    
    this.endsAt = endsAt;
    return this;
  }

   /**
   * The timestamp of when the partner account will be frozen, formatted in RFC-3339.
   * @return endsAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The timestamp of when the partner account will be frozen, formatted in RFC-3339.")

  public OffsetDateTime getEndsAt() {
    return endsAt;
  }


  public void setEndsAt(OffsetDateTime endsAt) {
    
    
    
    this.endsAt = endsAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Account instance itself
   */
  public Account putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.customerAccountUid, account.customerAccountUid) &&
        Objects.equals(this.accountType, account.accountType) &&
        Objects.equals(this.activationToken, account.activationToken) &&
        Objects.equals(this.domain, account.domain) &&
        Objects.equals(this.status, account.status) &&
        Objects.equals(this.deployedMembers, account.deployedMembers) &&
        Objects.equals(this.createdAt, account.createdAt) &&
        Objects.equals(this.updatedAt, account.updatedAt) &&
        Objects.equals(this.endsAt, account.endsAt)&&
        Objects.equals(this.additionalProperties, account.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerAccountUid, accountType, activationToken, domain, status, deployedMembers, createdAt, updatedAt, endsAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    customerAccountUid: ").append(toIndentedString(customerAccountUid)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    activationToken: ").append(toIndentedString(activationToken)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    deployedMembers: ").append(toIndentedString(deployedMembers)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    endsAt: ").append(toIndentedString(endsAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customer_account_uid");
    openapiFields.add("account_type");
    openapiFields.add("activation_token");
    openapiFields.add("domain");
    openapiFields.add("status");
    openapiFields.add("deployed_members");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");
    openapiFields.add("ends_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Account
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("customer_account_uid") != null && !jsonObj.get("customer_account_uid").isJsonNull()) && !jsonObj.get("customer_account_uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_account_uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_account_uid").toString()));
      }
      if ((jsonObj.get("account_type") != null && !jsonObj.get("account_type").isJsonNull()) && !jsonObj.get("account_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_type").toString()));
      }
      if ((jsonObj.get("activation_token") != null && !jsonObj.get("activation_token").isJsonNull()) && !jsonObj.get("activation_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activation_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activation_token").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Account instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Account given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Account
  * @throws IOException if the JSON string is invalid with respect to Account
  */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

 /**
  * Convert an instance of Account to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

